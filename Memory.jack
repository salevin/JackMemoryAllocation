// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

  static int freeList;
  static Array Memory;

  /** Initializes memory parameters. */
  function void init() {
    let freeList = 2048;
    let Memory = Array.new(16483);
    let Memory[2048] = 14435;
    let Memory[2049] = -1;
    return;
  }

  /** Returns the value of the main memory at the given address. */
  function int peek(int address) {
    return Memory[address];
  }

  /** Sets the value of the main memory at this address
   *  to the given value. */
  function void poke(int address, int value) {
    let Memory[address] = value;
    return;
  }

  /** finds and allocates from the heap a memory block of the 
   *  specified size and returns a reference to its base address. */
  function int alloc(int size) {
    var int segSize, seg, prevPointer, newSeg;
    let prevPointer = -1;
    let seg = freeList;
    let segSize = Memory[seg];
    while (segSize < (size + 1)){
      if (Memory[seg + 1] = -1){
        do Sys.error(6);
        return -1;
      }
      let prevPointer = seg + 1;
      let seg = Memory[seg+1];
      let segSize = Memory[seg];
    }
    if ((segSize - size) < 2){
      if (prevPointer = -1){
        let freeList = Memory[freeList+1];
      }
      else {
        let Memory[prevPointer] = Memory[seg + 1];
      }
      return seg + 1;
    }  else {
      let newSeg = segSize - (size + 1);
      let Memory[seg] = newSeg;
      let Memory[seg + newSeg] = size + 1;
      return  seg + newSeg + 1;
    }
  }

  /** De-allocates the given object and frees its space. */
  function void deAlloc(int object) {
    var int seg, size, nextSeg, prevSeg;
    let seg = object - 1;
    let size = Memory[seg];
    let nextSeg = freeList;
    let prevSeg = -1;
    while (nextSeg < seg & ~(nextSeg = -1)){
      let prevSeg = nextSeg;
      let nextSeg = Memory[nextSeg + 1];
    }

    if (seg + Memory[seg] = nextSeg){
      let Memory[seg] = Memory[seg] + Memory[nextSeg];
      let nextSeg = Memory[nextSeg + 1];
    }

    if (prevSeg = -1){
      let freeList = seg;
      let Memory[seg + 1] = nextSeg;
    }

    else {
      if ((prevSeg + Memory[prevSeg]) = seg){
        let Memory[prevSeg] = Memory[prevSeg] + Memory[seg];
        let Memory[prevSeg + 1] = nextSeg;
      }

      else {
        let Memory[prevSeg + 1] = seg;
        let Memory[seg + 1] = nextSeg;
      }
    }
    return;
  }
}

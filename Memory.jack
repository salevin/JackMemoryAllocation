// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

  field int freeList, max;
  field Array Memory;

    /** Initializes memory parameters. */
    function void init() {
      freeList = 2048;
      max = 16483;
      Memory = Array.new();
      let Memory[2048] = 14435;
      let Memory[2049] = -1;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
      return Memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
      let Memory[address] = value;
      return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
      var int segSize, seg, prevPointer, newSeg;
      prevPointer = -1;
      seg = freeList;
      segSize = Memory[seg];
      while (segSize < size + 1){
        if (Memory[seg+1] = -1){
          do Sys.error(6);
          return -1;
        }
        prevPointer = seg + 1;
        seg = Memory[seg+1];
        segSize = Memory[seg];
      }
      if (segSize - size < 2){
        Memory[prevPointer] = Memory[seg + 1];
        return seg + 1;
      } else {
        newSeg = segSize - (size + 1);
        Memory[seg] = newSegx;
        Memory[seg + newSeg] = size + 1;
        return  seg + newSeg + 1;
      }
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
      var int seg, size, nextSeg, prevSeg;
      seg = object - 1;
      size = Memory[seg];
      nextSeg = freeList;
      prevSeg = -1;
      while (nextSeg < seg && ~(nextSeg = -1)){
        prevSeg = nextSeg;
        nextSeg = Memory[nextSeg + 1];
      }

      if (seg + Memory[seg] = nextSeg){
        Memory[seg] = Memory[seg] + Memory[nextSeg];
        nextSeg = Memory[nextSeg + 1];
      }

      if (prevSeg == -1){
        freeList = seg;
        Memory[seg + 1] = p;
      }

      else if (prevSeg + Memory[prevSeg] = seg){
        Memory[prevSeg] = Memory[prevSeg] + Memory[seg];
        Memory[prevSeg + 1] = nextSeg;
      }

      else {
        Memory[prevSeg + 1] = seg;
        Memory[seg + 1] = nextSeg;
      }
      
    }
}
